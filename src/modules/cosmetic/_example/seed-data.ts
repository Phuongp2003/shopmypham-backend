import { prisma } from '@/config/prisma';
import { CosmeticType } from '../cosmetic.types';

// Helper function to generate placeholder images
const generateImageUrl = (width: number = 400, height: number = 400, seed?: string): string => {
  if (seed) {
    return `https://picsum.photos/seed/${seed}/${width}/${height}`;
  }
  return `https://picsum.photos/${width}/${height}`;
};

// Sample data
const optionSampleData = [
  { optionKey: "Lo·∫°i da", optionValue: "Da d·∫ßu", id: "option-1" },
  { optionKey: "Lo·∫°i da", optionValue: "Da kh√¥", id: "option-2" },
  { optionKey: "Lo·∫°i da", optionValue: "Da h·ªón h·ª£p", id: "option-3" },
  { optionKey: "M√πi h∆∞∆°ng", optionValue: "Tr√† xanh", id: "option-4" },
  { optionKey: "M√πi h∆∞∆°ng", optionValue: "Hoa h·ªìng", id: "option-5" },
  { optionKey: "M√πi h∆∞∆°ng", optionValue: "D√¢u t√¢y", id: "option-6" },
  { optionKey: "Ch·ªâ s·ªë ch·ªëng n·∫Øng", optionValue: "SPF 30", id: "option-7" },
  { optionKey: "Ch·ªâ s·ªë ch·ªëng n·∫Øng", optionValue: "SPF 50+", id: "option-8" },
  { optionKey: "D·∫°ng s·∫£n ph·∫©m", optionValue: "Tu√Ωp", id: "option-9" },
  { optionKey: "D·∫°ng s·∫£n ph·∫©m", optionValue: "X·ªãt", id: "option-10" }
];

const shippingPolicyData = [
  {
    id: "shipping-policy-1",
    name: "Ch√≠nh s√°ch giao h√†ng ti√™u chu·∫©n",
    description: "Ch√≠nh s√°ch giao h√†ng ti√™u chu·∫©n cho c√°c s·∫£n ph·∫©m chƒÉm s√≥c da",
    deliveryTime: "3-5 ng√†y l√†m vi·ªác",
    freeShippingThreshold: 500000,
    features: [
      {
        title: "Giao h√†ng nhanh",
        description: "3-5 ng√†y l√†m vi·ªác",
        icon: "üöö",
        orderIndex: 1
      },
      {
        title: "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
        description: "cho ƒë∆°n h√†ng t·ª´ 500.000‚Ç´",
        icon: "üí∞",
        orderIndex: 2
      },
      {
        title: "ƒê√≥ng g√≥i c·∫©n th·∫≠n",
        description: "B·∫£o v·ªá s·∫£n ph·∫©m trong qu√° tr√¨nh v·∫≠n chuy·ªÉn",
        icon: "üì¶",
        orderIndex: 3
      },
      {
        title: "Theo d√µi ƒë∆°n h√†ng",
        description: "C·∫≠p nh·∫≠t t√¨nh tr·∫°ng theo th·ªùi gian th·ª±c",
        icon: "üì±",
        orderIndex: 4
      }
    ]
  },
  {
    id: "shipping-policy-2", 
    name: "Ch√≠nh s√°ch giao h√†ng cao c·∫•p",
    description: "Ch√≠nh s√°ch giao h√†ng cao c·∫•p cho c√°c s·∫£n ph·∫©m makeup v√† skincare",
    deliveryTime: "1-2 ng√†y l√†m vi·ªác",
    freeShippingThreshold: 300000,
    features: [
      {
        title: "Giao h√†ng si√™u t·ªëc",
        description: "1-2 ng√†y l√†m vi·ªác",
        icon: "‚ö°",
        orderIndex: 1
      },
      {
        title: "Mi·ªÖn ph√≠ ship",
        description: "cho ƒë∆°n h√†ng t·ª´ 300.000‚Ç´",
        icon: "üéÅ",
        orderIndex: 2
      },
      {
        title: "Giao h√†ng COD",
        description: "Thanh to√°n khi nh·∫≠n h√†ng",
        icon: "üí≥",
        orderIndex: 3
      },
      {
        title: "ƒê·ªïi tr·∫£ mi·ªÖn ph√≠",
        description: "trong v√≤ng 7 ng√†y",
        icon: "‚Ü©Ô∏è",
        orderIndex: 4
      },
      {
        title: "H·ªó tr·ª£ 24/7",
        description: "T∆∞ v·∫•n v√† h·ªó tr·ª£ m·ªçi l√∫c",
        icon: "üìû",
        orderIndex: 5
      }
    ]
  }
];

const cosmeticSampleData = [
  {
    name: "S·ªØa r·ª≠a m·∫∑t d·ªãu nh·∫π",
    description: "L√†m s·∫°ch s√¢u, ph√π h·ª£p da nh·∫°y c·∫£m.",
    price: 120000,
    stock: 100,
    type: "SKINCARE" as CosmeticType,
    image: generateImageUrl(500, 500, "cleanser"),
    usageInstructions: "<p>B∆∞·ªõc 1: L√†m ∆∞·ªõt m·∫∑t v·ªõi n∆∞·ªõc ·∫•m</p><p>B∆∞·ªõc 2: L·∫•y l∆∞·ª£ng v·ª´a ƒë·ªß s·∫£n ph·∫©m, massage nh·∫π nh√†ng</p><p>B∆∞·ªõc 3: R·ª≠a s·∫°ch v·ªõi n∆∞·ªõc v√† th·∫•m kh√¥</p>",
    distributorId: "distributor-1",
    shippingPolicyId: "shipping-policy-1",
    specifications: [
      { key: "Dung t√≠ch", value: "150ml" },
      { key: "Th√†nh ph·∫ßn", value: "Chi·∫øt xu·∫•t tr√† xanh" }
    ],
    benefits: [
      {
        benefitKey: "L√†m s·∫°ch s√¢u",
        benefitValue: "C√¥ng th·ª©c ƒë·∫∑c bi·ªát gi√∫p l√†m s·∫°ch s√¢u c√°c t·∫°p ch·∫•t v√† b·ª•i b·∫©n trong l·ªó ch√¢n l√¥ng",
        orderIndex: 1
      },
      {
        benefitKey: "D·ªãu nh·∫π cho da",
        benefitValue: "Chi·∫øt xu·∫•t thi√™n nhi√™n gi√∫p l√†m d·ªãu da, ph√π h·ª£p cho da nh·∫°y c·∫£m",
        orderIndex: 2
      },
      {
        benefitKey: "C√¢n b·∫±ng ƒë·ªô ·∫©m",
        benefitValue: "Kh√¥ng l√†m kh√¥ da, duy tr√¨ ƒë·ªô ·∫©m t·ª± nhi√™n c·ªßa da",
        orderIndex: 3
      }
    ],
    badges: [
      {
        badgeType: "QUALITY",
        title: "Ch·∫•t l∆∞·ª£ng cao c·∫•p",
        icon: "‚≠ê",
        color: "gold",
        orderIndex: 1
      },
      {
        badgeType: "MADE_IN",
        title: "S·∫£n xu·∫•t t·∫°i Vi·ªát Nam",
        icon: "üáªüá≥",
        color: "green",
        orderIndex: 2
      }
    ],
    reviews: [
      {
        rating: 5,
        title: "S·∫£n ph·∫©m tuy·ªát v·ªùi!",
        content: "M√¨nh ƒë√£ d√πng s·∫£n ph·∫©m n√†y ƒë∆∞·ª£c 2 th√°ng v√† th·∫•y da m√¨nh c·∫£i thi·ªán r√µ r·ªát. S·ªØa r·ª≠a m·∫∑t r·∫•t d·ªãu nh·∫π, kh√¥ng g√¢y kh√¥ da.",
        isVerified: true,
        isApproved: true,
        userName: "Nguy·ªÖn Th·ªã Lan"
      },
      {
        rating: 4,
        title: "Kh√° ·ªïn cho da nh·∫°y c·∫£m",
        content: "Da m√¨nh kh√° nh·∫°y c·∫£m nh∆∞ng d√πng s·∫£n ph·∫©m n√†y kh√¥ng b·ªã k√≠ch ·ª©ng. Tuy nhi√™n m√πi h∆∞∆°ng h∆°i nh·∫°t.",
        isVerified: true,
        isApproved: true,
        userName: "Tr·∫ßn VƒÉn Nam"
      },
      {
        rating: 5,
        title: "R·∫•t th√≠ch!",
        content: "L√†m s·∫°ch r·∫•t t·ªët m√† kh√¥ng l√†m kh√¥ da. Gi√° c·∫£ h·ª£p l√Ω.",
        isVerified: false,
        isApproved: true,
        userName: "L√™ Th·ªã Hoa"
      }
    ],
    variants: [
      { 
        name: "D·∫°ng tu√Ωp nh·ªè", 
        sku: "SRM-01", 
        price: 120000, 
        stock: 30, 
        image: generateImageUrl(400, 400, "cleanser-tube-small"),
        optionIds: ["option-1", "option-2"] 
      },
      { 
        name: "D·∫°ng tu√Ωp l·ªõn", 
        sku: "SRM-02", 
        price: 180000, 
        stock: 40, 
        image: generateImageUrl(400, 400, "cleanser-tube-large"),
        optionIds: ["option-3", "option-4"] 
      },
      { 
        name: "D·∫°ng chai", 
        sku: "SRM-03", 
        price: 200000, 
        stock: 30, 
        image: generateImageUrl(400, 400, "cleanser-bottle"),
        optionIds: ["option-5", "option-6"] 
      }
    ]
  },
  {
    name: "Kem ch·ªëng n·∫Øng to√†n th√¢n",
    description: "B·∫£o v·ªá da kh·ªèi tia UV, kh√¥ng nh·ªùn r√≠t.",
    price: 250000,
    stock: 80,
    type: "SKINCARE" as CosmeticType,
    image: generateImageUrl(500, 500, "sunscreen"),
    usageInstructions: "<p>B∆∞·ªõc 1: Thoa ƒë·ªÅu l√™n to√†n th√¢n tr∆∞·ªõc khi ra n·∫Øng 15-20 ph√∫t</p><p>B∆∞·ªõc 2: Thoa l·∫°i m·ªói 2 ti·∫øng ho·∫∑c sau khi b∆°i, ƒë·ªï m·ªì h√¥i</p><p>B∆∞·ªõc 3: S·ª≠ d·ª•ng h√†ng ng√†y ƒë·ªÉ b·∫£o v·ªá da t·ªët nh·∫•t</p>",
    distributorId: "distributor-1",
    shippingPolicyId: "shipping-policy-1",
    specifications: [
      { key: "Ch·ªâ s·ªë ch·ªëng n·∫Øng", value: "SPF 50+" },
      { key: "D·∫°ng", value: "Kem" }
    ],
    benefits: [
      {
        benefitKey: "B·∫£o v·ªá kh·ªèi tia UV",
        benefitValue: "Ch·ªâ s·ªë SPF 50+ b·∫£o v·ªá da kh·ªèi tia UVA v√† UVB c√≥ h·∫°i",
        orderIndex: 1
      },
      {
        benefitKey: "Kh√¥ng nh·ªùn r√≠t",
        benefitValue: "C√¥ng th·ª©c nh·∫π, th·∫•m nhanh, kh√¥ng ƒë·ªÉ l·∫°i c·∫£m gi√°c nh·ªùn r√≠t kh√≥ ch·ªãu",
        orderIndex: 2
      },
      {
        benefitKey: "Ch·ªëng n∆∞·ªõc",
        benefitValue: "C√¥ng th·ª©c ch·ªëng n∆∞·ªõc, b·ªÅn m√†u ngay c·∫£ khi b∆°i l·ªôi ho·∫∑c ƒë·ªï m·ªì h√¥i",
        orderIndex: 3
      }
    ],
    badges: [
      {
        badgeType: "CERTIFICATION",
        title: "Ki·ªÉm ƒë·ªãnh FDA",
        icon: "‚úÖ",
        color: "blue",
        orderIndex: 1
      },
      {
        badgeType: "QUALITY",
        title: "Ch·∫•t l∆∞·ª£ng cao c·∫•p",
        icon: "‚≠ê",
        color: "gold",
        orderIndex: 2
      },
      {
        badgeType: "SHIPPING",
        title: "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
        icon: "üöö",
        color: "green",
        orderIndex: 3
      }
    ],
    reviews: [
      {
        rating: 5,
        title: "Ch·ªëng n·∫Øng hi·ªáu qu·∫£",
        content: "M√¨nh l√†m vi·ªác ngo√†i tr·ªùi nhi·ªÅu, d√πng kem n√†y kh√¥ng b·ªã ch√°y n·∫Øng. Th·∫•m nhanh, kh√¥ng nh·ªùn r√≠t.",
        isVerified: true,
        isApproved: true,
        userName: "Ph·∫°m Minh Tu·∫•n"
      },
      {
        rating: 4,
        title: "T·ªët nh∆∞ng h∆°i ƒë·∫Øt",
        content: "Ch·∫•t l∆∞·ª£ng t·ªët, b·∫£o v·ªá da hi·ªáu qu·∫£. Ch·ªâ c√≥ ƒëi·ªÅu gi√° h∆°i cao so v·ªõi m·∫∑t b·∫±ng chung.",
        isVerified: true,
        isApproved: true,
        userName: "Ho√†ng Th·ªã Mai"
      },
      {
        rating: 5,
        title: "S·∫Ω mua l·∫°i",
        content: "Kem ch·ªëng n·∫Øng t·ªët nh·∫•t m√¨nh t·ª´ng d√πng. Kh√¥ng g√¢y b√≠t t·∫Øc l·ªó ch√¢n l√¥ng.",
        isVerified: true,
        isApproved: true,
        userName: "ƒê·ªó VƒÉn H√πng"
      }
    ],
    variants: [
      { 
        name: "D·∫°ng tu√Ωp", 
        sku: "KCN-01", 
        price: 250000, 
        stock: 30, 
        image: generateImageUrl(400, 400, "sunscreen-tube"),
        optionIds: ["option-7", "option-8"] 
      },
      { 
        name: "D·∫°ng x·ªãt", 
        sku: "KCN-02", 
        price: 270000, 
        stock: 25, 
        image: generateImageUrl(400, 400, "sunscreen-spray"),
        optionIds: ["option-9", "option-10"] 
      },
      { 
        name: "D·∫°ng gel", 
        sku: "KCN-03", 
        price: 260000, 
        stock: 25, 
        image: generateImageUrl(400, 400, "sunscreen-gel"),
        optionIds: ["option-1", "option-3"] 
      }
    ]
  },
  {
    name: "Son d∆∞·ª°ng m√¥i thi√™n nhi√™n",
    description: "D∆∞·ª°ng ·∫©m, l√†m m·ªÅm m√¥i, kh√¥ng ch√¨.",
    price: 90000,
    stock: 150,
    type: "MAKEUP" as CosmeticType,
    image: generateImageUrl(500, 500, "lipbalm"),
    usageInstructions: "<p>B∆∞·ªõc 1: L√†m s·∫°ch m√¥i</p><p>B∆∞·ªõc 2: Thoa ƒë·ªÅu son d∆∞·ª°ng l√™n m√¥i</p><p>B∆∞·ªõc 3: S·ª≠ d·ª•ng 2-3 l·∫ßn m·ªói ng√†y ho·∫∑c khi c·∫ßn thi·∫øt</p>",
    distributorId: "distributor-1",
    shippingPolicyId: "shipping-policy-2",
    specifications: [
      { key: "M√†u s·∫Øc", value: "H·ªìng nh·∫°t" },
      { key: "H∆∞∆°ng", value: "D√¢u t√¢y" }
    ],
    benefits: [
      {
        benefitKey: "D∆∞·ª°ng ·∫©m t·ª©c th√¨",
        benefitValue: "Cung c·∫•p ƒë·ªô ·∫©m ngay l·∫≠p t·ª©c cho ƒë√¥i m√¥i kh√¥ v√† n·ª©t n·∫ª",
        orderIndex: 1
      },
      {
        benefitKey: "100% thi√™n nhi√™n",
        benefitValue: "Th√†nh ph·∫ßn ho√†n to√†n t·ª´ thi√™n nhi√™n, an to√†n cho s·ª©c kh·ªèe",
        orderIndex: 2
      },
      {
        benefitKey: "M√πi h∆∞∆°ng d·ªÖ ch·ªãu",
        benefitValue: "H∆∞∆°ng d√¢u t√¢y t·ª± nhi√™n, t·∫°o c·∫£m gi√°c t∆∞∆°i m√°t",
        orderIndex: 3
      }
    ],
    badges: [
      {
        badgeType: "MADE_IN",
        title: "S·∫£n xu·∫•t t·∫°i Vi·ªát Nam",
        icon: "üáªüá≥",
        color: "green",
        orderIndex: 1
      },
      {
        badgeType: "WARRANTY",
        title: "B·∫£o h√†nh 30 ng√†y",
        icon: "üõ°Ô∏è",
        color: "blue",
        orderIndex: 2
      },
      {
        badgeType: "RETURN_POLICY",
        title: "ƒê·ªïi tr·∫£ mi·ªÖn ph√≠",
        icon: "‚Ü©Ô∏è",
        color: "orange",
        orderIndex: 3
      }
    ],
    reviews: [
      {
        rating: 5,
        title: "M√¥i m·ªÅm m∆∞·ª£t",
        content: "Thoa l√™n m√¥i r·∫•t m·ªÅm m∆∞·ª£t, m√πi d√¢u t√¢y d·ªÖ ch·ªãu. Thi·∫øt k·∫ø ƒë·∫πp n·ªØa.",
        isVerified: true,
        isApproved: true,
        userName: "V≈© Th·ªã Linh"
      },
      {
        rating: 4,
        title: "D∆∞·ª°ng ·∫©m t·ªët",
        content: "D∆∞·ª°ng ·∫©m r·∫•t t·ªët, ƒë·∫∑c bi·ªát v√†o m√πa kh√¥. M√πi h∆∞∆°ng t·ª± nhi√™n, kh√¥ng h√≥a ch·∫•t.",
        isVerified: true,
        isApproved: true,
        userName: "B√πi VƒÉn ƒê·ª©c"
      },
      {
        rating: 5,
        title: "Thi√™n nhi√™n 100%",
        content: "Th√≠ch nh·∫•t l√† th√†nh ph·∫ßn thi√™n nhi√™n, an to√†n cho s·ª©c kh·ªèe. Hi·ªáu qu·∫£ d∆∞·ª°ng ·∫©m r·∫•t t·ªët.",
        isVerified: true,
        isApproved: true,
        userName: "Ng√¥ Th·ªã H∆∞∆°ng"
      }
    ],
    variants: [
      { 
        name: "H·ªìng t·ª± nhi√™n", 
        sku: "SON-01", 
        price: 90000, 
        stock: 50, 
        image: generateImageUrl(400, 400, "lipbalm-pink"),
        optionIds: ["option-2", "option-4"] 
      },
      { 
        name: "Cam ƒë√†o", 
        sku: "SON-02", 
        price: 95000, 
        stock: 50, 
        image: generateImageUrl(400, 400, "lipbalm-peach"),
        optionIds: ["option-5", "option-7"] 
      },
      { 
        name: "ƒê·ªè cherry", 
        sku: "SON-03", 
        price: 95000, 
        stock: 50, 
        image: generateImageUrl(400, 400, "lipbalm-cherry"),
        optionIds: ["option-6", "option-8"] 
      }
    ]
  }
];

// Helper function to calculate average rating
function calculateAverageRating(reviews: any[]): number {
  if (reviews.length === 0) return 0;
  const approvedReviews = reviews.filter(review => review.isApproved);
  if (approvedReviews.length === 0) return 0;
  
  const sum = approvedReviews.reduce((acc, review) => acc + review.rating, 0);
  return Math.round((sum / approvedReviews.length) * 10) / 10; // Round to 1 decimal place
}

// Helper function to create sample users for reviews
async function createSampleUsers() {
  const userNames = [
    "Nguy·ªÖn Th·ªã Lan", "Tr·∫ßn VƒÉn Nam", "L√™ Th·ªã Hoa", "Ph·∫°m Minh Tu·∫•n", 
    "Ho√†ng Th·ªã Mai", "ƒê·ªó VƒÉn H√πng", "V≈© Th·ªã Linh", "B√πi VƒÉn ƒê·ª©c", "Ng√¥ Th·ªã H∆∞∆°ng"
  ];
  
  const users = [];
  for (const name of userNames) {
    const email = name.toLowerCase().replace(/ /g, '') + '@example.com';
    const user = await prisma.user.upsert({
      where: { email },
      update: { name },
      create: {
        email,
        name,
        password: 'hashedpassword123', // In real app, this would be properly hashed
        secretKey: 'sample-secret-key'
      }
    });
    users.push(user);
  }
  return users;
}

export async function seedCosmeticData() {
  console.log('üå± Starting enhanced cosmetic data seeding...');

  try {
    // 1. Create sample users for reviews
    console.log('üë• Creating sample users...');
    const users = await createSampleUsers();
    console.log(`‚úÖ Created/updated ${users.length} sample users`);

    // 2. Create distributor sample if not exists
    const distributorId = "distributor-1";
    const existingDistributor = await prisma.cosmeticDistributor.findUnique({
      where: { id: distributorId }
    });

    if (!existingDistributor) {
      await prisma.cosmeticDistributor.create({
        data: {
          id: distributorId,
          name: "Nh√† ph√¢n ph·ªëi m·∫´u",
          address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
          phone: "0123456789",
          email: "distributor@example.com"
        }
      });
      console.log('‚úÖ Created sample distributor');
    } else {
      console.log('‚ÑπÔ∏è  Sample distributor already exists');
    }

    // 3. Create shipping policies
    console.log('üöö Creating shipping policies...');
    for (const policy of shippingPolicyData) {
      await prisma.shippingPolicy.upsert({
        where: { id: policy.id },
        update: {
          name: policy.name,
          description: policy.description,
          deliveryTime: policy.deliveryTime,
          freeShippingThreshold: policy.freeShippingThreshold
        },
        create: {
          id: policy.id,
          name: policy.name,
          description: policy.description,
          deliveryTime: policy.deliveryTime,
          freeShippingThreshold: policy.freeShippingThreshold,
          features: {
            create: policy.features
          }
        }
      });
    }
    console.log(`‚úÖ Created/updated ${shippingPolicyData.length} shipping policies`);

    // 4. Create options
    console.log('üîß Creating options...');
    for (const option of optionSampleData) {
      await prisma.cosmeticOption.upsert({
        where: { id: option.id },
        update: {
          optionKey: option.optionKey,
          optionValue: option.optionValue
        },
        create: {
          id: option.id,
          optionKey: option.optionKey,
          optionValue: option.optionValue
        }
      });
    }
    console.log(`‚úÖ Created/updated ${optionSampleData.length} options`);

    // 5. Create cosmetics with enhanced features
    console.log('üíÑ Creating enhanced cosmetics...');
    for (const cosmetic of cosmeticSampleData) {
      const existingCosmetic = await prisma.cosmetic.findFirst({
        where: { name: cosmetic.name }
      });

      if (existingCosmetic) {
        console.log(`‚ÑπÔ∏è  Cosmetic "${cosmetic.name}" already exists, skipping...`);
        continue;
      }

      // Calculate rating statistics
      const averageRating = calculateAverageRating(cosmetic.reviews);
      const totalReviews = cosmetic.reviews.filter(r => r.isApproved).length;

      await prisma.$transaction(async (tx) => {
        // Create cosmetic with enhanced fields
        const createdCosmetic = await tx.cosmetic.create({
          data: {
            name: cosmetic.name,
            description: cosmetic.description,
            price: cosmetic.price,
            stock: cosmetic.stock,
            type: cosmetic.type,
            distributorId: cosmetic.distributorId,
            image: cosmetic.image,
            usageInstructions: cosmetic.usageInstructions,
            shippingPolicyId: cosmetic.shippingPolicyId,
            averageRating,
            totalReviews,
          },
        });

        // Create specifications
        if (cosmetic.specifications?.length > 0) {
          for (const spec of cosmetic.specifications) {
            await tx.cosmeticSpec.create({
              data: {
                cosmeticId: createdCosmetic.id,
                specKey: spec.key,
                specValue: spec.value,
              },
            });
          }
        }

        // Create benefits
        if (cosmetic.benefits?.length > 0) {
          for (const benefit of cosmetic.benefits) {
            await tx.cosmeticBenefit.create({
              data: {
                cosmeticId: createdCosmetic.id,
                benefitKey: benefit.benefitKey,
                benefitValue: benefit.benefitValue,
                orderIndex: benefit.orderIndex,
              },
            });
          }
        }

        // Create badges
        if (cosmetic.badges?.length > 0) {
          for (const badge of cosmetic.badges) {
            await tx.cosmeticBadge.create({
              data: {
                cosmeticId: createdCosmetic.id,
                badgeType: badge.badgeType as any,
                title: badge.title,
                icon: badge.icon,
                color: badge.color,
                orderIndex: badge.orderIndex,
              },
            });
          }
        }

        // Create reviews with user associations
        if (cosmetic.reviews?.length > 0) {
          for (const review of cosmetic.reviews) {
            const user = users.find(u => u.name === review.userName);
            await tx.cosmeticReview.create({
              data: {
                cosmeticId: createdCosmetic.id,
                userId: user?.id,
                rating: review.rating,
                title: review.title,
                content: review.content,
                isVerified: review.isVerified,
                isApproved: review.isApproved,
              },
            });
          }
        }

        // Create variants with options using implicit many-to-many
        if (cosmetic.variants?.length > 0) {
          for (const variant of cosmetic.variants) {
            await tx.cosmeticVariant.create({
              data: {
                cosmeticId: createdCosmetic.id,
                name: variant.name,
                sku: variant.sku,
                price: variant.price,
                stock: variant.stock,
                image: variant.image,
                CosmeticOption: {
                  connect: variant.optionIds.map(id => ({ id }))
                }
              },
            });
          }
        }
      });

      console.log(`‚úÖ Created enhanced cosmetic "${cosmetic.name}" with benefits, badges, reviews and variants`);
    }

    console.log('üéâ Enhanced cosmetic data seeding completed successfully!');
    
    // Display statistics
    const stats = await getStats();
    console.log('\nüìä Database Statistics:');
    console.log(`- Users: ${stats.users}`);
    console.log(`- Distributors: ${stats.distributors}`);
    console.log(`- Shipping Policies: ${stats.shippingPolicies}`);
    console.log(`- Shipping Features: ${stats.shippingFeatures}`);
    console.log(`- Options: ${stats.options}`);
    console.log(`- Cosmetics: ${stats.cosmetics}`);
    console.log(`- Variants: ${stats.variants}`);
    console.log(`- Specifications: ${stats.specifications}`);
    console.log(`- Benefits: ${stats.benefits}`);
    console.log(`- Badges: ${stats.badges}`);
    console.log(`- Reviews: ${stats.reviews}`);

  } catch (error) {
    console.error('‚ùå Error seeding enhanced cosmetic data:', error);
    throw error;
  }
}

async function getStats() {
  const [
    users, distributors, shippingPolicies, shippingFeatures, options, 
    cosmetics, variants, specifications, benefits, badges, reviews
  ] = await Promise.all([
    prisma.user.count(),
    prisma.cosmeticDistributor.count(),
    prisma.shippingPolicy.count(),
    prisma.shippingFeature.count(),
    prisma.cosmeticOption.count(),
    prisma.cosmetic.count(),
    prisma.cosmeticVariant.count(),
    prisma.cosmeticSpec.count(),
    prisma.cosmeticBenefit.count(),
    prisma.cosmeticBadge.count(),
    prisma.cosmeticReview.count(),
  ]);

  return { 
    users, distributors, shippingPolicies, shippingFeatures, options, 
    cosmetics, variants, specifications, benefits, badges, reviews 
  };
}

// Script to run directly
if (require.main === module) {
  seedCosmeticData()
    .then(() => {
      console.log('‚úÖ Enhanced seed completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Enhanced seed failed:', error);
      process.exit(1);
    });
} 
