generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid())
    email     String    @unique
    password  String
    name      String
    phone     String?
    role      String    @default("user")
    googleId  String?   @unique
    posts     Post[]
    comments  Comment[]
    orders    Order[]
    cart      Cart?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Post {
    id        String    @id @default(uuid())
    title     String
    content   String
    published Boolean   @default(false)
    authorId  String
    author    User      @relation(fields: [authorId], references: [id])
    comments  Comment[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    authorId  String
    postId    String
    author    User     @relation(fields: [authorId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id              String        @id @default(uuid())
    userId          String
    status          OrderStatus   @default(PENDING)
    shippingAddress String
    note            String?
    user            User          @relation(fields: [userId], references: [id])
    details         OrderDetail[]
    payments        Payment[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

model OrderDetail {
    id         String   @id @default(uuid())
    orderId    String
    cosmeticId String
    quantity   Int
    price      Float
    order      Order    @relation(fields: [orderId], references: [id])
    cosmetic   Cosmetic @relation(fields: [cosmeticId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Cart {
    id        String       @id @default(uuid())
    userId    String       @unique
    user      User         @relation(fields: [userId], references: [id])
    details   CartDetail[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model CartDetail {
    id         String   @id @default(uuid())
    cartId     String
    cosmeticId String
    quantity   Int
    price      Float
    cart       Cart     @relation(fields: [cartId], references: [id])
    cosmetic   Cosmetic @relation(fields: [cosmeticId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Cosmetic {
    id           String        @id @default(uuid())
    name         String
    description  String?
    price        Float
    stock        Int          @default(0)
    type         CosmeticType
    distributorId String
    styleId      String
    distributor  CosmeticDistributor @relation(fields: [distributorId], references: [id])
    style        CosmeticStyle       @relation(fields: [styleId], references: [id])
    cartDetails  CartDetail[]
    orderDetails OrderDetail[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model CosmeticDistributor {
    id          String     @id @default(uuid())
    name        String
    address     String?
    phone       String?
    email       String?
    cosmetics   Cosmetic[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model CosmeticStyle {
    id          String     @id @default(uuid())
    name        String
    description String?
    cosmetics   Cosmetic[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

enum CosmeticType {
    SKINCARE
    MAKEUP
    HAIRCARE
    FRAGRANCE
    BODYCARE
    NAILCARE
    OTHER
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

model Payment {
    id            String        @id @default(uuid())
    orderId       String
    amount        Float
    status        PaymentStatus @default(PENDING)
    paymentMethod String
    transactionId String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    order         Order         @relation(fields: [orderId], references: [id])

    @@index([orderId])
}
