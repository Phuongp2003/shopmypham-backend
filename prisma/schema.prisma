generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(uuid())
    email     String    @unique
    password  String
    name      String
    phone     String?
    role      String    @default("user")
    googleId  String?   @unique
    secretKey String
    posts     Post[]
    comments  Comment[]
    orders    Order[]
    cart      Cart?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Post {
    id        String    @id @default(uuid())
    title     String
    content   String
    published Boolean   @default(false)
    authorId  String
    author    User      @relation(fields: [authorId], references: [id])
    comments  Comment[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    authorId  String
    postId    String
    author    User     @relation(fields: [authorId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id              String        @id @default(uuid())
    userId          String
    status          OrderStatus   @default(PENDING)
    shippingAddress String
    note            String?
    user            User          @relation(fields: [userId], references: [id])
    details         OrderDetail[]
    payments        Payment[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

model OrderDetail {
    id         String   @id @default(uuid())
    orderId    String
    variantId  String   // Thay cosmeticId bằng variantId
    quantity   Int
    price      Float
    order      Order    @relation(fields: [orderId], references: [id])
    variant    CosmeticVariant  @relation(fields: [variantId], references: [id]) // Thay cosmetic bằng variant
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Cart {
    id        String       @id @default(uuid())
    userId    String       @unique
    user      User         @relation(fields: [userId], references: [id])
    details   CartDetail[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model CartDetail {
    id         String   @id @default(uuid())
    cartId     String
    variantId  String   // Thay cosmeticId bằng variantId
    quantity   Int
    price      Float
    cart       Cart     @relation(fields: [cartId], references: [id])
    variant    CosmeticVariant  @relation(fields: [variantId], references: [id]) // Thay cosmetic bằng variant
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Cosmetic {
    id            String              @id @default(uuid())
    name          String
    description   String?
    price         Float
    stock         Int                 @default(0)
    type          CosmeticType
    distributorId String
    distributor   CosmeticDistributor @relation(fields: [distributorId], references: [id])
    variants      CosmeticVariant[]           // Thêm quan hệ với Variant
    specifications CosmeticSpec[]    // Thêm bảng đặc điểm sản phẩm
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
}

model CosmeticVariant {
  id          String     @id @default(uuid())
  cosmeticId  String
  cosmetic    Cosmetic   @relation(fields: [cosmeticId], references: [id])
  sku         String     @unique
  price       Float
  stock       Int        @default(0)

  cartItems   CartDetail[]
  orderItems  OrderDetail[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  CosmeticVariantOption CosmeticVariantOption[]
}

model CosmeticVariantOption {
  id        String   @id @default(uuid())
  variantId String
  variant   CosmeticVariant @relation(fields: [variantId], references: [id])
  optionId String
  option   CosmeticOption @relation(fields: [optionId], references: [id])
}

//Bảng này dùng để mô tả các tùy chọn của từng biến thể sản phẩm
model CosmeticOption {
  id        String   @id @default(uuid())
  optionKey       String   // VD: "color", "size"
  optionValue     String   // VD: "Đỏ cam", "50ml"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CosmeticVariantOption CosmeticVariantOption[]
}

model CosmeticSpec {
  id         String   @id @default(uuid())
  cosmeticId String
  cosmetic   Cosmetic @relation(fields: [cosmeticId], references: [id])
  specKey    String   // VD: "ingredients", "benefits"
  specValue  String   // VD: "Vitamin E", "Dưỡng ẩm 24h"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CosmeticDistributor {
    id        String     @id @default(uuid())
    name      String
    address   String?
    phone     String?
    email     String?
    cosmetics Cosmetic[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

// model CosmeticStyle {
//     id          String     @id @default(uuid())
//     name        String
//     description String?
//     cosmetics   Cosmetic[]
//     createdAt   DateTime   @default(now())
//     updatedAt   DateTime   @updatedAt
// }




enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

enum CosmeticType {
    SKINCARE
    MAKEUP
    HAIRCARE
    FRAGRANCE
    BODYCARE
    NAILCARE
    OTHER
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

model Payment {
    id            String        @id @default(uuid())
    orderId       String
    amount        Float
    status        PaymentStatus @default(PENDING)
    paymentMethod String
    transactionId String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    order         Order         @relation(fields: [orderId], references: [id])

    @@index([orderId])
}
